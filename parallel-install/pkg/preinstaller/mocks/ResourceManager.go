// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	schema "k8s.io/apimachinery/pkg/runtime/schema"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// ResourceManager is an autogenerated mock type for the ResourceManager type
type ResourceManager struct {
	mock.Mock
}

// CreateResource provides a mock function with given fields: resource, gvk
func (_m *ResourceManager) CreateResource(resource *unstructured.Unstructured, gvk schema.GroupVersionKind) error {
	ret := _m.Called(resource, gvk)

	var r0 error
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured, schema.GroupVersionKind) error); ok {
		r0 = rf(resource, gvk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteResource provides a mock function with given fields: resourceName, gvk
func (_m *ResourceManager) DeleteResource(resourceName string, gvk schema.GroupVersionKind) error {
	ret := _m.Called(resourceName, gvk)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, schema.GroupVersionKind) error); ok {
		r0 = rf(resourceName, gvk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetResource provides a mock function with given fields: resourceName, gvk
func (_m *ResourceManager) GetResource(resourceName string, gvk schema.GroupVersionKind) (*unstructured.Unstructured, error) {
	ret := _m.Called(resourceName, gvk)

	var r0 *unstructured.Unstructured
	if rf, ok := ret.Get(0).(func(string, schema.GroupVersionKind) *unstructured.Unstructured); ok {
		r0 = rf(resourceName, gvk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, schema.GroupVersionKind) error); ok {
		r1 = rf(resourceName, gvk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResource provides a mock function with given fields: resource, gvk
func (_m *ResourceManager) UpdateResource(resource *unstructured.Unstructured, gvk schema.GroupVersionKind) (*unstructured.Unstructured, error) {
	ret := _m.Called(resource, gvk)

	var r0 *unstructured.Unstructured
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured, schema.GroupVersionKind) *unstructured.Unstructured); ok {
		r0 = rf(resource, gvk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*unstructured.Unstructured, schema.GroupVersionKind) error); ok {
		r1 = rf(resource, gvk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
