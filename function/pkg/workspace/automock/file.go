// Code generated by MockGen. DO NOT EDIT.
// Source: file.go

// Package mock_workspace is a generated GoMock package.
package mock_workspace

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// Mockfile is a mock of file interface
type Mockfile struct {
	ctrl     *gomock.Controller
	recorder *MockfileMockRecorder
}

// MockfileMockRecorder is the mock recorder for Mockfile
type MockfileMockRecorder struct {
	mock *Mockfile
}

// NewMockfile creates a new mock instance
func NewMockfile(ctrl *gomock.Controller) *Mockfile {
	mock := &Mockfile{ctrl: ctrl}
	mock.recorder = &MockfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockfile) EXPECT() *MockfileMockRecorder {
	return m.recorder
}

// write mocks base method
func (m *Mockfile) write(arg0 io.Writer, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// write indicates an expected call of write
func (mr *MockfileMockRecorder) write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "write", reflect.TypeOf((*Mockfile)(nil).write), arg0, arg1)
}

// fileName mocks base method
func (m *Mockfile) fileName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fileName")
	ret0, _ := ret[0].(string)
	return ret0
}

// fileName indicates an expected call of fileName
func (mr *MockfileMockRecorder) fileName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fileName", reflect.TypeOf((*Mockfile)(nil).fileName))
}
