// Code generated by MockGen. DO NOT EDIT.
// Source: run.go

// Package mock_docker is a generated GoMock package.
package mock_docker

import (
	context "context"
	types "github.com/docker/docker/api/types"
	container "github.com/docker/docker/api/types/container"
	network "github.com/docker/docker/api/types/network"
	gomock "github.com/golang/mock/gomock"
	specs "github.com/opencontainers/runc/Godeps/_workspace/src/github.com/opencontainers/runtime-spec/specs-go"
	reflect "reflect"
	time "time"
)

// MockContainerClient is a mock of ContainerClient interface
type MockContainerClient struct {
	ctrl     *gomock.Controller
	recorder *MockContainerClientMockRecorder
}

// MockContainerClientMockRecorder is the mock recorder for MockContainerClient
type MockContainerClientMockRecorder struct {
	mock *MockContainerClient
}

// NewMockContainerClient creates a new mock instance
func NewMockContainerClient(ctrl *gomock.Controller) *MockContainerClient {
	mock := &MockContainerClient{ctrl: ctrl}
	mock.recorder = &MockContainerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContainerClient) EXPECT() *MockContainerClientMockRecorder {
	return m.recorder
}

// ContainerCreate mocks base method
func (m *MockContainerClient) ContainerCreate(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *specs.Platform, containerName string) (container.ContainerCreateCreatedBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerCreate", ctx, config, hostConfig, networkingConfig, platform, containerName)
	ret0, _ := ret[0].(container.ContainerCreateCreatedBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerCreate indicates an expected call of ContainerCreate
func (mr *MockContainerClientMockRecorder) ContainerCreate(ctx, config, hostConfig, networkingConfig, platform, containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerCreate", reflect.TypeOf((*MockContainerClient)(nil).ContainerCreate), ctx, config, hostConfig, networkingConfig, platform, containerName)
}

// ContainerStart mocks base method
func (m *MockContainerClient) ContainerStart(ctx context.Context, containerID string, options types.ContainerStartOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStart", ctx, containerID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStart indicates an expected call of ContainerStart
func (mr *MockContainerClientMockRecorder) ContainerStart(ctx, containerID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStart", reflect.TypeOf((*MockContainerClient)(nil).ContainerStart), ctx, containerID, options)
}

// ContainerAttach mocks base method
func (m *MockContainerClient) ContainerAttach(ctx context.Context, container string, options types.ContainerAttachOptions) (types.HijackedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerAttach", ctx, container, options)
	ret0, _ := ret[0].(types.HijackedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerAttach indicates an expected call of ContainerAttach
func (mr *MockContainerClientMockRecorder) ContainerAttach(ctx, container, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerAttach", reflect.TypeOf((*MockContainerClient)(nil).ContainerAttach), ctx, container, options)
}

// ContainerStop mocks base method
func (m *MockContainerClient) ContainerStop(ctx context.Context, containerID string, timeout *time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStop", ctx, containerID, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStop indicates an expected call of ContainerStop
func (mr *MockContainerClientMockRecorder) ContainerStop(ctx, containerID, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStop", reflect.TypeOf((*MockContainerClient)(nil).ContainerStop), ctx, containerID, timeout)
}
